<div class="container text-center mt-4 mb-4 pt-4 pb-4 col-md-8 bg-dark rounded text-light">

  <h1><%= link_to "About", about_path, class: "no-link text-white" %></h1>
  <h2 id="about-line"></h2> <!-- This is a line underneath About -->
  <h5>This website was created in:</h5>
  <div class="container adjusted-spacing">
    <p>Ruby</p>
    <p>Rails version 6.1.4</p>
    <p>Bootstrap 5.0.2</p>
    <p>CSS</p>

    <div class="container mt-4 text-start">

      <p class="p-about-indent">This was a good learning experience, which followed along with lessons from <%= link_to "The Complete Ruby on Rails Developer Course", "https://www.udemy.com/course/the-complete-ruby-on-rails-developer-course", class: "no-link" %> on <%= link_to "Udemy", "https://www.udemy.com", class: "no-link" %></p>

      <p class="p-about-indent mt-2">I learned about how to develop the back-end of a website, which meant laying the foundation for the website, creating basic models and views, controlling how data works behind the scenes. I developed an understanding of controllers which are very important, just as in the name, they're almost like the brain telling when to do things. Controllers are used for sending specific information, like models or which page to show users, to specific places. When no information is being sent, they merely exist just to send the correct view, or page, to the user. The routes Ruby file is used for all the different places that can be visited, such as the <%= link_to "Home page", root_path, class: "no-link" %>, this <%= link_to "About page", about_path, class: "no-link" %>, the <%= link_to "Articles page", articles_path, class: "no-link" %>, <%= link_to "Categories page", categories_path, class: "no-link" %>, <%= link_to "Users page", users_path, class: "no-link" %>, along with all the article, category, and user pages as well. The routes Ruby file defines what can be reached, and thereby presented to the user. The back-end is the backbone of the website. It connects everything together and makes it all work. All of these and how they work were part of the back-end.</p>

      <p class="p-about-indent mt-2">I learned about how to create the front-end of a website as well, which meant fiddling around with looks and small portions of each page until things look and respond correctly. It meant adjusting some things even by mere pixels until everything was perfect. Without any of this, the website would be plain and boring; easy to skip over, and ignore. The front-end is what the general user of the website sees when they enter the website. The nice, pretty, understandable organization of the website.</p>

      <p class="p-about-indent mt-2">I also learned about embedded Ruby, which are files like this one! This file is not a simple HTML file, this is a <span class="about-purple">.html.erb</span> file, which means it is HTML with embedded Ruby, which means that Ruby can be used in this HTML file! I think this is really useful and fun to use!</p>

      <p class="p-about-indent mt-2">Not only did this project help me learn how to code and put everything together, it also helped me learn about <%= link_to "Github", "https://www.github.com", class: "no-link" %>, <%= link_to "Heroku", "https://www.heroku.com", class: "no-link" %>, <%= link_to "Bootstrap", "https://getbootstrap.com", class: "no-link" %>, the terminal (or Powershell), the Rails console, and how to search for documentation. I didn't know about how to use <%= link_to "Github", "https://www.github.com", class: "no-link" %> going into this, but I learned plenty about it on the way. I ended up learning how to roll back to an older version when I used a command in the terminal that installed unnecessary things to the project. Heroku is what's currently running this website live for others to see, when I have a stable version running, I can push (send the website) to Heroku, which runs it live 24/7. Bootstrap combines JavaScript, CSS, and HTML to make for easier implementation of commonly used code. The terminal or powershell, are used for development and testing purposes, same with the Rails console, which can be opened in the terminal or powershell.</p>

      <p class="p-about-indent mt-2">Testing was also important. Manually testing a website as it progresses can take some time, and something useful about Rails is that there's a built-in testing folder for making some functional tests and integration tests. Functional testing is testing for specific functions, like creating an article or a new user. Integration testing involves testing multiple functions being used together. Just because a function works during a functional test doesn't mean it will work when combined with the other functions to complete an overall task. I had some trouble understanding testing, but have started to get a hold of it more. I think that's where I can work on most, not on a syntax level, but an understanding of the syntax. It's been troublesome to get the 'click', the 'I got it!' moment, but I've started to get a grasp on it!</p>

      <p class="p-about-indent mt-2">An important thing I learned about were how models associate with each other. What's a model? A model is like an Article or a User or a Category. They're built from the same blueprint, like how all houses have the same purpose, but they look different or are in different physical locations from others. How models are associated with each other is how they relate to each other, and what they're meant to do together. There is the has_many association, which means that one model can have a relationship with many of another model type, but the other model type can only belong to one of the first model. An example of this is shown in this website on a user's profile. A user can have many articles they've written, but each article only belongs to one user. A real life example is the relationship of a mother or father to their children. A mother can have many children, but the children can only have one biological mother. A father can have many children, but the children can only have one biological father. The other association I learned about was many_to_many. This is similar to has_many, except has_many is on both ends, instead of one model being has_many and the other model belonging to that one. The example used in this website is with the relationship of categories and articles. There are many categories, and many articles, and one article can fit in to many categories, and one category can fit many articles.</p>

      <p class="p-about-indent mt-2">I thoroughly enjoyed this project and created this simple <%= link_to "About page", about_path, class: "no-link" %> fully from scratch (without help; this entire website was created fully from scratch). There's not a lot in this page, but it helped me to further practice some of what I've learned. I know there's a ton more to learn, but I think this has really helped me to scratch the surface and start building a strong foundation.</p>

      <p class="text-center mt-3">Creating this was an amazing learning experience.</p>
      <p class="text-center mt-3">Developed in 7 days.</p>
      <p class="text-center mt-3">Thank you for your time,</p>
      
      <p class="text-center mt-3"><%= link_to "Prashant Jaiswal", "https://www.facebook.com/rockstar.pj", class: "text-white", id: "link-tristan" %></p>

    </div>
  </div>


</div>